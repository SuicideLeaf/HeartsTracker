// <auto-generated />
using System;
using HeartsTracker.Dal.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HeartsTracker.Dal.Migrations
{
    [DbContext(typeof(HeartsTrackerContext))]
    [Migration("20181124113231_UpdatedTables")]
    partial class UpdatedTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HeartsTracker.Dal.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDateTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsComplete");

                    b.Property<int?>("LoserId");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int?>("WinnerId");

                    b.HasKey("Id");

                    b.HasIndex("LoserId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("HeartsTracker.Dal.Entities.GamePlayer", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("PlayerId");

                    b.Property<int>("OrderNumber");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GamePlayers");
                });

            modelBuilder.Entity("HeartsTracker.Dal.Entities.GameRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DealerId");

                    b.Property<int>("GameId");

                    b.Property<bool>("IsComplete");

                    b.Property<bool>("IsKeepRound");

                    b.Property<int>("RoundNumber");

                    b.HasKey("Id");

                    b.HasIndex("DealerId");

                    b.HasIndex("GameId");

                    b.ToTable("GameRounds");
                });

            modelBuilder.Entity("HeartsTracker.Dal.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Colour");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<string>("PlayerName");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("HeartsTracker.Dal.Entities.PlayerScore", b =>
                {
                    b.Property<int>("PlayerId");

                    b.Property<int>("RoundId");

                    b.Property<bool>("BlackBitched");

                    b.Property<int?>("GameRoundId");

                    b.Property<int>("Score");

                    b.Property<bool>("ShotTheMoon");

                    b.HasKey("PlayerId", "RoundId");

                    b.HasIndex("GameRoundId");

                    b.ToTable("PlayerScores");
                });

            modelBuilder.Entity("HeartsTracker.Dal.Entities.Game", b =>
                {
                    b.HasOne("HeartsTracker.Dal.Entities.Player", "Loser")
                        .WithMany("GamesLost")
                        .HasForeignKey("LoserId");

                    b.HasOne("HeartsTracker.Dal.Entities.Player", "Winner")
                        .WithMany("GamesWon")
                        .HasForeignKey("WinnerId");
                });

            modelBuilder.Entity("HeartsTracker.Dal.Entities.GamePlayer", b =>
                {
                    b.HasOne("HeartsTracker.Dal.Entities.Game", "Game")
                        .WithMany("GamePlayers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HeartsTracker.Dal.Entities.Player", "Player")
                        .WithMany("GamePlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HeartsTracker.Dal.Entities.GameRound", b =>
                {
                    b.HasOne("HeartsTracker.Dal.Entities.Player", "Dealer")
                        .WithMany("GameRoundsDealt")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HeartsTracker.Dal.Entities.Game", "Game")
                        .WithMany("GameRounds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HeartsTracker.Dal.Entities.PlayerScore", b =>
                {
                    b.HasOne("HeartsTracker.Dal.Entities.GameRound", "GameRound")
                        .WithMany("Scores")
                        .HasForeignKey("GameRoundId");

                    b.HasOne("HeartsTracker.Dal.Entities.Player", "Player")
                        .WithMany("Scores")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
